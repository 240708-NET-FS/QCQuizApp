Category:HTML & CSS;Question:Define what HTML is.;Answer:HTML stands for Hypertext Markup Language. It’s a form of markup language that is used for making web pages.
Category:HTML & CSS;Question:Describe the structure of an HTML Document and what is included in the different sections.;Answer:The file opens with an html tag (maybe a doctype too) followed by a header with a head tag, then a body using the body tag. Headers contain metadata like title and style. The body contains headings and paragraphs as well as the majority of the text content..
Category:HTML & CSS;Question:List HTML Common Tags and why they are different from divs.;Answer:The most common tags are paragraph, link, lists, images, buttons and headings. Div creates a division within the document. This allows for style changes and general organization.
Category:HTML & CSS;Question:Describe how/where you link an external CSS sheet into an HTML Document.;Answer: You link it in the header and use <link rel = “style sheet” type = “text/css” href = “styles.css”/>
Category:HTML & CSS;Question:Describe how/where you link an external JS sheet into an HTML Document.;Answer:Using the script tag in the header. <script src=”x.js”>...</script>.
Category:HTML & CSS;Question:Understand the structure of a CSS style rule.;Answer:A CSS rule contains selectors and declarations. The selector points to an html element, the declaration styles the element.
Category:HTML & CSS;Question:Understand and explain the CSS box model.;Answer:The CSS Box Model describes a design and layout of your HTML web page. Much like its name, it wraps around every HTML element, consisting of content, padding, borders and margins. 
Category:HTML & CSS;Question:Describe the different ways to add styling to an HTML Document.;Answer:The most common way is to use a CSS file that’s linked in the header. You can also use inline CSS and a variety of built in HTML style features.
Category:HTML & CSS;Question:Understand the correct syntax for styling different elements such as by tag,class,id,etc.;Answer:Tags are denoted simply by their name, classes are marked by a dot before them, and an ID uses a hash before the name. So p is a paragraph tag, .code is a class named code, and #code is an id named code.
Category:HTML & CSS;Question:What is the CSS priority in regards to inline,internal and external.;Answer:The order of priority from highest to lowest is inline, internal & embedded, then external. Inline CSS is just CSS written on the line it’s used. Internal is CSS in the document but not the given line, so like a class being used in the header of the document. External is an external CSS file that is linked in the header. Priority of internal code prioritizes inline code, then IDs, then classes, and lastly elements.
Category:HTML & CSS;Question:Please construct an HTML form.;Answer:A form allows a user to input something. A form uses a form tag as well as form elements, which are like inputs or labels.. Example.
Category:HTML & CSS;Question:How do you add comments to an HTML Document.;Answer: You add them by typing in ‘<! -- ‘ and ending with ‘-->' (Less than, exclamation mark, two dashes, then finish with two dashes, greater than)
Category:HTML & CSS;Question:Describe the syntax of different HTML elements/tags including the table tag.;Answer:Div makes a division or section in the document, p marks a paragraph, a marks a hyperlink, img marks an embedded image, ul makes an unordered list, ol makes an ordered list, li makes a list item, table defines a table, tr makes a table row, th makes a table header cell, td makes a data cell, form makes a form, input defines an input within a form, button makes a clickable button, h1-h6 make headings, span makes a generic inline container, label labels an input element. As for syntax, div, table, need to be filled out, and both unordered and ordered lists need list items. These elements are wrapped in an opening and closing tag, so <form>...</form> for form. p, li, tr, th, td, button, headings, and span all wrap their content with opening and closing tags, so <p> content </p>. a requires a reference in its first tag (<a href=”...”>), img requires a source and alt in its first tag (<img src=”” alt=”” >) and does not require a closing tag, input requires a type in its opening tag (<input type=”...”>) and does not require a closing tag, and label requires a for in its opening tag (<label for=”...”>...</label>).
Category:HTML & CSS;Question:How do you take in user input using a variety of input tags (text,checkbox,etc).;Answer:Utilizing the input tag, then the type of the input can vary from context to context. ‘Text’, ‘checkbox’,and ‘number’ are all types of input, with ‘text’ being the default. You would get the value of the input by reading its ‘value’ attribute.
Category:HTML & CSS;Question:Describe how to use Bubbling and the correct syntax for it.;Answer:’Bubbling’ and ‘capturing’ are two ways of event propagation in the HTML DOM API, when an event occurs in an element inside another element, and both elements have registered a handle for that event. The syntax for it would be to declare two functions, for example ‘bubble’ and ‘capture’, then addEventListeners for both functions on the same HTML control. Bubbling solves the child issue first, and goes upward from there, “bubbling to the top”.
Category:HTML & CSS;Question:Describe the benefits of combinators and how to use them.;Answer:CSS combinators are special characters that define the relationship between two CSS selectors. They are used to select elements based on their relationship in the HTML structure, allowing for precise and efficient styling.
Category:HTML & CSS;Question:How would you make responsive webpages using CSS.;Answer: Use the ‘@media’ query to make the elements have specific behavior e.g. @media (max-width- 1250px) {/* … */}
Category:Typescript;Question:What are the differences between Typescript and Javascript.;Answer:Javascript is weakly and dynamically typed. Typescript is strictly and statically typed. This means that in Javascript, you do not need to declare the type of a variable as it is interpreted at runtime, and it is also dynamic. While with Typescript, which is built upon Javascript, you must declare the type of all variables, and these types cannot be changed mid-program. 
Category:Typescript;Question:How would you use Typescript outside of React/Angular.;Answer: You can compile and use Typescript using the Node runtime environment. 
Category:Typescript;Question:How do you declare and use an enum in TypeScript.;Answer:You declare the enum with ‘enum’, then a name for the enum variable. In curly brackets, you would then declare names, such as ‘North’, ‘South’, ‘East’ and so on. It’s important to note that in Typescript, an enum always starts at 0, and the following values increase by 1. You would then use your enum in the code with ‘enumName.enumVariable’.
Category:Typescript;Question:What different TypeScript-unique features transpile to in JavaScript.;Answer:TypeScript is known as an Object-oriented programming language whereas JavaScript is a prototype-based language.TypeScript has a feature known as Static typing but JavaScript does not support this feature.TypeScript supports Interfaces but JavaScript does not.
Category:Typescript;Question:What is the proper syntax for declaring a strong static type.;Answer:let age- number = 20;.
Category:Typescript;Question:How would you implement OOP in Typescript.;Answer: You can implement OOP in typescript by declaring an interface that defines the properties that an object must have and the types those properties can have. Inheritance comes by way of having another object type as a property type. 
Category:Typescript;Question:What is the process of Transpilation and its importance in web development;Answer:Transpilation plays a critical role in modern web development by enabling developers to write code in advanced languages or using modern syntax features and then converting that code into a version that is compatible with a broader range of environments.
Category:Javascript;Question:Describe what JS is.;Answer: Javascript is a weakly dynamically typed multiparadigm interpreted programming language widely used for adding behavior to web pages 
Category:Javascript;Question:Describe what type coercion is.;Answer:Type Coercion refers to the process of automatic or implicit conversion of values from one data type to another. This includes conversion from Number to String, String to Number, Boolean to Number, etc
Category:Javascript;Question:Describe what truthy/falsy is.;Answer: Truthy is anything that evaluates to true in a boolean context which is most things excluding null, empty string and undefined as well as boolean false and 0 
Category:Javascript;Question:Describe the different variable scopes in JS.;Answer: variables can be global scoped which is available to all contexts on a page / block scoped - available to the block of code (loop) they live in / function or local  scoped - available to the function that they are declared in  
Category:Javascript;Question:Talk about the different data types in JS.;Answer: Number/bigint/symbol/boolean/string/null/undefined/Object (includes functions) 
Category:Javascript;Question:How do you Create variables in JS.;Answer: just declare name = value e.g. x = 5 
Category:Javascript;Question:How do you Create objects in JS.;Answer: name = {key, value}/ can separate key value pairs with commas. It is the key colon value for the object declaration.
Category:Javascript;Question:Describe what the DOM is.;Answer: A tree-based structure representing the elements and text content in the HTML document with the document at the root 
Category:Javascript;Question:How do you Query the DOM for elements.;Answer: the DOM API provides methods to our javascript including getElementById / appendChild/ createElement
Category:Javascript;Question:Describe what event listeners are.;Answer: event listeners are javascript functions that you can attach to an html element to run as part of the event loop 
Category:Javascript;Question:Describe what bubbling and capturing are and their difference.;Answer: there are three phases to event handling  - 1. Capturing - the event focuses down to the innermost element that was acted on running handlers on all of its ancestors on the way down /  2. Target - the event handler for the target element runs / 3. Bubbling - the event handlers are invoked in order of the ancestors of the target element back out to the document . event handlers mainly deal with stages 2 and 3 but you can change that by setting {capture- true} in options 
Category:Javascript;Question:Describe what JS is.;Answer:JavaScript is a scripting or programming language that allows you to implement complex features on web pages
Category:Javascript;Question:List the steps to sending an HTTP request using the Fetch API.;Answer:You start by calling fetch(), passing it a request object or a string containing the URL. You can attach an object containing the body and request method (default is ‘get’) The fetch will then return a promise, which is the completion or failure of an asynchronous operation and its value.
Category:Javascript;Question:Describe what type of object the Fetch API returns.;Answer:Fetch returns a promise object that holds a response object.
Category:Javascript;Question:Describe what function and variable hoisting is.;Answer:Hoisting refers to the built-in behavior of the language through which declarations of functions, variables, and classes are moved to the top of their scope – all before code execution. In turn, this allows us to use functions, variables, and classes before they are declared.
Category:Javascript;Question:Describe what async/await is and how they compare to using .then().;Answer:The difference between then() and async/await is that when a promise needs to get resolved in a function having then(), the function containing then() doesn't get suspended from the call stack. It remains in the call stack till the promise gets resolved. Whereas, in the async/await, when the resolve() keyword is encountered, the async function is suspended from the call stack, and the thread remains inactive if the async function is the entry point of the event handler. Only when the promise resolves, the async function gets pushed again in the call stack.
Category:Javascript;Question:How do you Handle errors in JS.;Answer:You utilize the ‘try’, ‘catch’, ‘throw’ and ‘finally’ keywords. ‘Try’ will execute the code within it’s brackets, with ‘catch’ being executed if the code within ‘try’ encounters an error. ‘Finally’ will always execute no matter what the resulting code is. ‘Throw’ allows you to define a custom error, which may lead to more useful debugging statements.
Category:Javascript;Question:How do you Create arrays in JS.;Answer:const  array1 = [“value1”, “value2”]
Category:Javascript;Question:Talk about all the different array methods and how to use them.;Answer: Important array methods include filter, reduce, and map. Filter accepts a callback that returns either true or false as an argument and will return the array elements that return true when the callback is executed on them. Reduce accepts a callback as an argument and will store the result of evaluating the callback on each element of the array in the accumulator - then return the final value of the accumulator (you also pass in the start value or have it default to the first element of the array). Map accepts a callback and returns an array whose elements are the returned result of invoking the callback on each corresponding element of the array. 
Category:Javascript;Question:Talk about the different functions in JS.;Answer:There are four broad types of functions. Regular functions- can return anything, always runs to completion after invocation. Generator functions- returns a Generator object, and it can be paused and resumed with the yield operator. Async functions returns a Promise and can be paused and resumed with the await operator.Async generator function, which returns an AsyncGenerator object and both the await and yield operators can be used.
Category:Javascript;Question:How do you Use template literals.;Answer:Template literals are literals delimited with backtick (`) characters, allowing for multi-line strings, string interpolation with embedded expressions, and special constructs called tagged templates. Template literals are sometimes informally called template strings, because they are used most commonly for string interpolation (to create strings by doing substitution of placeholders). However, a tagged template literal may not result in a string; it can be used with a custom tag function to perform whatever operations you want on the different parts of the template literal.
Category:Javascript;Question:How do you Loop through arrays.;Answer: Use for loop / for…in / for… of / list.forEach() 
Category:Javascript;Question:How do you Insert new elements into the DOM.;Answer:To create a new HTML element, you have to use the [document.createElement()](https-//developer.mozilla.org/en-US/docs/Web/API/Document/createElement) method. const el = document. createElement("div")
Category:Javascript;Question:How do you Handle a failed request when using the Fetch API.;Answer:try/catch is used to get errors when the promise gets rejected (network or CORS issues) response. ok is used to handle server errors (404 or 500, for example) when the promise gets resolved.
Category:Javascript;Question:Describe what the ‘this’ keyword is.;Answer: ‘this’ is a keyword that refers to an object, depending on context. In an object method ‘this’ refers to the object. Alone, ‘this’ refers to the global object. It is not a variable, its value cannot be changed
Category:Javascript;Question:Describe the characteristics of functional programming.;Answer: Functions are first class citizens of the language (in an OO programming language classes are and functions can only exist as class methods) 
Category:Javascript;Question:Describe how guard and default operators work.;Answer:Assuming we have a variable by name of  ‘someObject’, Default would be declared with ‘someObject = objectA || {}’. In this example, if objectA were to be coerced into being false, then the brackets would act as a default value. Otherwise, someObject would reference objectA. Guard is done in a similar manner, by using ‘&&’ (ampersands). If ‘someObject = objectA && objectB’, and objectA was coerced into being false, then someObject would reference objectA. Otherwise, someObject would reference objectB.
Category:Javascript;Question:How do you Create callback functions?;Answer: pass a function in as an argument to another function
Category:Javascript;Question:How do you Create arrow functions?;Answer: const func = () => {} 
Category:Javascript;Question:How do you Create anonymous functions?;Answer: () => {} ( no declaration) 
Category:Javascript;Question:Tell the difference between for of and for in.;Answer: for… of access values, in an object , for … in accesses keys 
Category:Javascript;Question:Describe some methods on the event object and what they do.;Answer:stopPropagation() - ends the bubbling phase on the current element 
Category:Javascript;Question:Describe the different promise methods.;Answer:There is all, which returns a single Promise from a list of promises and executes when all promises fulfill. allSettled, which returns a single Promise from a list of promises, and executes when all promises settle. Any, which returns a single Promise from a list of promises, and executes when any promise fulfills. Race, which returns a single Promise from a list of promises, and executes when the faster promise settles. Reject, which returns a Promise object rejected with a value. Resolve, which returns a Promise object resolved with a value. Catch, which provides a function to be called when a promise is rejected. Finally, which provides a function to be called when a promise is fulfilled or rejected. Lastly there is then, which provides two functions to be called when a promise is fulfilled or rejected
Category:Javascript;Question:Describe how inheritance works in JS.;Answer:JavaScript implements inheritance by using objects. Each object has an internal link to another object called its prototype.
Category:React;Question:How do you Create Function Components.;Answer:We can create a functional component in React by writing a JavaScript function. These functions may or may not receive data as parameters. In the functional Components, the return value is the JSX code to render to the DOM tree
Category:React;Question:Describe how Single Page Applications work differently from Multi Page Applications.;Answer:Single page applications work within a single browser session and allow users to jump between parts of the system without requiring the entire page to reload. On the other hand, multi-page applications require a new page to be loaded every time the user interacts with the application.
Category:React;Question:What are the most common hooks in react and how are they used?;Answer:useState-Allows you to use state in a functional component.useEffect-Allows you to perform side effects in a functional component, such as fetching data from an API or updating the document title.useContext-Allows you to use context in a functional component.useReducer-Allows you to use a reducer to manage state in a functional component.useCallback- Allows you to memoize a function so that it only changes when its dependencies change.useMemo- Allows you to memoize a value so that it only changes when its dependencies change.useRef-Allows you to create a mutable ref object that persists for the lifetime of the component.
Category:React;Question:How do you Pass props into a Component.;Answer:To pass props, add them to the JSX, just like you would with HTML attributes. To read props, use the function Avatar({ person, size }) destructuring syntax. You can specify a default value like size = 100 , which is used for missing and undefined props.
Category:React;Question:How do you Create a JSX file and what is it?.;Answer:JSX stands for JavaScript XML. It allows us to write HTML in React and makes it easier to write and add HTML in React. You make the file a JSX file by adding the ‘.jsx’ extension at the end.
Category:React;Question:How do you use Axios or Fetch to make HTTP requests.;Answer:In order to use Axios, we would use the request, get, delete, head, options, post, put, or patch methods. Using fetch is the same as it is in javascript, by using the fetch method.
Category:React;Question:How do you set up routing between Components?;Answer: By wrapping the entire application, or specific parts of your application with the BrowserRouter. Doing this allows you to enable client-side routing for all child components within the router. You would then navigate the pages using the Route Component.
Category:React;Question:How is data handled in React?;Answer:Data is immutable, Data always flows down, React is lightweight and un-opinioned.
Category:React;Question:What are the different types of function components and how do you create them?;Answer:React functional components are just normal JavaScript functions; we can create them using specific function keywords. Most developers create functional components using the Arrow function. The functional component’s primary purpose is to render the view and the data to the browser.In other words, functional components accept data, or more technically, it takes props as a function argument and returns the data in valid JSX form.  
Category:React;Question:How do you add additional NPM libraries to a React Project to add new, already created functionality.;Answer:You would use ‘npm install – save packageName’, where packageName is the name of the package. Doing this will save the library to your package.json, and can easily be updated using ‘npm update’.
Category:React;Question:How do you create multiple contexts with createContext().;Answer:To use multiple contexts, you create each context using React. createContext and then use a Context. Provider to pass the current context value to the tree below. Any component in the tree can access the value by using a Context
Category:React;Question:How do you wrap components and distribute the application state?;Answer:It starts with importing the necessary modules from React and any other libraries you use. Then, you define the function or class that represents your wrapper component.
Category:React;Question:How would you use .UseReducer and .UseContext?;Answer:useReducer provides a way to manage complex state transitions in a more predictable and manageable way, while useContext allows you to pass data down the component tree without having to pass props manually through each level simply, making your data globally available.
Category:React;Question:How do you test components in React?;Answer:Testing a React application falls under two categories, Rendering component trees in a simplified test environment and asserting on their output, and Running a complete app in a realistic browser environment (also known as “end-to-end” tests). We would do this by using the Jest tool, or the React Testing Library.
Category:React;Question:How do you create parent-child routing.;Answer:You can use the Outlet component. By using this component, the Outlet will render the routes you put inside the /admin route.